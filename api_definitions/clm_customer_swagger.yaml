# this is an example of the Service Order API
# as a demonstration of an API spec in YAML
swagger: '2.0'
info:
  title: "Customer Account Services"
  description: "Customer Account Services: Provides APIs for customer account information."
  version: "1.0.0"
# the domain of the service
host: "api.wowinc.com"
# array of all schemes that your API supports
schemes:
  - "https"
# will be prefixed to all paths
basePath: "/customer-account-v1"

paths:
  /account/summary:
    get:
      summary: "Get Customer Account by providing Account Number."
      operationId: "getAccountSummary"
      description: "Look up customers account based on Account Number. As result are returned Account Number, Customer name, Customer Address and Contact details."
      parameters:
        - name: accountNumber
          in: query
          type: string
          description: Account Number
          required: true
      tags:
        - Account
      produces:
        - application/json
      responses:
        200:
          description: "Customer account summary."
          schema:
            $ref: "#/definitions/AccountSummary"
        400:
          description: "Bad request."
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "User not authenticated."
        403:
          description: "User not authorized."
        404:
          description: "Not found."
        429:
          description: "API rate limit exceeded. Please try later."
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/Error"  
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: |-
                $input.path('$')
          ".*\"errorCode\":\"400\",.*":
            statusCode: '400'
            responseTemplates:
              application/json: |-
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errorCode" : "$errorMessageObj.errorCode",
                  "message" : "$errorMessageObj.message",
                  "requestId" : "$errorMessageObj.requestId",
                  "errorDescription" : "$errorMessageObj.errorDescription"
                }
          ".*\"errorCode\":\"401\",.*":
            statusCode: '401'
            responseTemplates:
              application/json: |-
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errorCode" : "$errorMessageObj.errorCode",
                  "message" : "$errorMessageObj.message",
                  "requestId" : "$errorMessageObj.requestId",
                  "errorDescription" : "$errorMessageObj.errorDescription"
                }
          ".*\"errorCode\":\"403\",.*":
            statusCode: '403'
            responseTemplates:
              application/json: |-
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errorCode" : "$errorMessageObj.errorCode",
                  "message" : "$errorMessageObj.message",
                  "requestId" : "$errorMessageObj.requestId",
                  "errorDescription" : "$errorMessageObj.errorDescription"
                }
          ".*\"errorCode\":\"500\",.*":
            statusCode: '500'
            responseTemplates:
              application/json: |-
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errorCode" : "$errorMessageObj.errorCode",
                  "message" : "$errorMessageObj.message",
                  "requestId" : "$errorMessageObj.requestId",
                  "errorDescription" : "$errorMessageObj.errorDescription"
                }
        requestTemplates:
          application/json: |
            ##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
            ##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload
            #set($allParams = $input.params())
            #set($qParams = $allParams.get("querystring"))
            #set($pParams = $allParams.get("path"))
            {
            "body" : {
            #foreach($paramName in $qParams.keySet())
            "$paramName" : "$util.escapeJavaScript($qParams.get($paramName))"
              #if($foreach.hasNext),#end
            #end
            #foreach($paramName in $pParams.keySet())
            "$paramName" : "$util.escapeJavaScript($pParams.get($paramName))"
              #if($foreach.hasNext),#end
            #end
            },
            "stage-variables" : {
            #foreach($key in $stageVariables.keySet())
            "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                #if($foreach.hasNext),#end
            #end
            },
            "context" : {
                "account-id" : "$context.identity.accountId",
                "api-id" : "$context.apiId",
                "api-key" : "$context.identity.apiKey",
                "authorizer-principal-id" : "$context.authorizer.principalId",
                "claims" : "$context.authorizer.claims",
                "caller" : "$context.identity.caller",
                "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                "http-method" : "$context.httpMethod",
                "stage" : "$context.stage",
                "source-ip" : "$context.identity.sourceIp",
                "user" : "$context.identity.user",
                "user-agent" : "$context.identity.userAgent",
                "user-arn" : "$context.identity.userArn",
                "request-id" : "$context.requestId",
                "resource-id" : "$context.resourceId",
                "resource-path" : "$context.resourcePath"
                }
            }
        passthroughBehavior: when_no_match
        uri: arn:aws:apigateway:us-east-1:lambda:path//2015-03-31/functions/arn:aws:lambda:us-east-1:982932535341:function:clm_customer_account_by_acc_number/invocations
        httpMethod: POST
        type: aws
      security:
        - CustomAuthorizer: []
        
  /account/billing:
    get:
      summary: "Get Customer Billing information by providing Account Number."
      operationId: "getAccountBilling"
      description: "Look up customers billing information based on Account Number. As result are returned billing related details."
      parameters:
        - name: accountNumber
          in: query
          type: string
          description: Account Number
          required: true
      tags:
        - Account
      produces:
        - application/json
      responses:
        200:
          description: "Customer billing information."
          schema:
            $ref: "#/definitions/BillingInfo"
        400:
          description: "Bad request."
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "User not authenticated."
        403:
          description: "User not authorized."
        404:
          description: "Not found."
        429:
          description: "API rate limit exceeded. Please try later."
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/Error"  
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: |-
                $input.path('$')
          ".*\"errorCode\":\"400\",.*":
            statusCode: '400'
            responseTemplates:
              application/json: |-
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errorCode" : "$errorMessageObj.errorCode",
                  "message" : "$errorMessageObj.message",
                  "requestId" : "$errorMessageObj.requestId",
                  "errorDescription" : "$errorMessageObj.errorDescription"
                }
          ".*\"errorCode\":\"401\",.*":
            statusCode: '401'
            responseTemplates:
              application/json: |-
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errorCode" : "$errorMessageObj.errorCode",
                  "message" : "$errorMessageObj.message",
                  "requestId" : "$errorMessageObj.requestId",
                  "errorDescription" : "$errorMessageObj.errorDescription"
                }
          ".*\"errorCode\":\"403\",.*":
            statusCode: '403'
            responseTemplates:
              application/json: |-
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errorCode" : "$errorMessageObj.errorCode",
                  "message" : "$errorMessageObj.message",
                  "requestId" : "$errorMessageObj.requestId",
                  "errorDescription" : "$errorMessageObj.errorDescription"
                }
          ".*\"errorCode\":\"500\",.*":
            statusCode: '500'
            responseTemplates:
              application/json: |-
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errorCode" : "$errorMessageObj.errorCode",
                  "message" : "$errorMessageObj.message",
                  "requestId" : "$errorMessageObj.requestId",
                  "errorDescription" : "$errorMessageObj.errorDescription"
                }
        requestTemplates:
          application/json: |
            ##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
            ##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload
            #set($allParams = $input.params())
            #set($qParams = $allParams.get("querystring"))
            #set($pParams = $allParams.get("path"))
            {
            "body" : {
            #foreach($paramName in $qParams.keySet())
            "$paramName" : "$util.escapeJavaScript($qParams.get($paramName))"
              #if($foreach.hasNext),#end
            #end
            #foreach($paramName in $pParams.keySet())
            "$paramName" : "$util.escapeJavaScript($pParams.get($paramName))"
              #if($foreach.hasNext),#end
            #end
            },
            "stage-variables" : {
            #foreach($key in $stageVariables.keySet())
            "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                #if($foreach.hasNext),#end
            #end
            },
            "context" : {
                "account-id" : "$context.identity.accountId",
                "api-id" : "$context.apiId",
                "api-key" : "$context.identity.apiKey",
                "authorizer-principal-id" : "$context.authorizer.principalId",
                "claims" : "$context.authorizer.claims",
                "caller" : "$context.identity.caller",
                "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                "http-method" : "$context.httpMethod",
                "stage" : "$context.stage",
                "source-ip" : "$context.identity.sourceIp",
                "user" : "$context.identity.user",
                "user-agent" : "$context.identity.userAgent",
                "user-arn" : "$context.identity.userArn",
                "request-id" : "$context.requestId",
                "resource-id" : "$context.resourceId",
                "resource-path" : "$context.resourcePath"
                }
            }
        passthroughBehavior: when_no_match
        uri: arn:aws:apigateway:us-east-1:lambda:path//2015-03-31/functions/arn:aws:lambda:us-east-1:982932535341:function:clm_customer_account_by_acc_number/invocations
        httpMethod: POST
        type: aws
      security:
        - CustomAuthorizer: []
  
  /account/bundle:
    get:
      summary: "Get Customer's Account bundle by providing Account Number."
      operationId: "getAccountBundle"
      description: "Look up account bundle based on Account Number. As result are *******."
      parameters:
        - name: accountNumber
          in: query
          type: string
          description: Account Number
          required: true
      tags:
        - Account
      produces:
        - application/json
      responses:
        200:
          description: "Customer account bundle."
          schema:
            $ref: "#/definitions/AccountBundle"
        400:
          description: "Bad request."
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "User not authenticated."
        403:
          description: "User not authorized."
        404:
          description: "Not found."
        429:
          description: "API rate limit exceeded. Please try later."
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/Error"  
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: |-
                $input.path('$')
          ".*\"errorCode\":\"400\",.*":
            statusCode: '400'
            responseTemplates:
              application/json: |-
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errorCode" : "$errorMessageObj.errorCode",
                  "message" : "$errorMessageObj.message",
                  "requestId" : "$errorMessageObj.requestId",
                  "errorDescription" : "$errorMessageObj.errorDescription"
                }
          ".*\"errorCode\":\"401\",.*":
            statusCode: '401'
            responseTemplates:
              application/json: |-
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errorCode" : "$errorMessageObj.errorCode",
                  "message" : "$errorMessageObj.message",
                  "requestId" : "$errorMessageObj.requestId",
                  "errorDescription" : "$errorMessageObj.errorDescription"
                }
          ".*\"errorCode\":\"403\",.*":
            statusCode: '403'
            responseTemplates:
              application/json: |-
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errorCode" : "$errorMessageObj.errorCode",
                  "message" : "$errorMessageObj.message",
                  "requestId" : "$errorMessageObj.requestId",
                  "errorDescription" : "$errorMessageObj.errorDescription"
                }
          ".*\"errorCode\":\"500\",.*":
            statusCode: '500'
            responseTemplates:
              application/json: |-
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errorCode" : "$errorMessageObj.errorCode",
                  "message" : "$errorMessageObj.message",
                  "requestId" : "$errorMessageObj.requestId",
                  "errorDescription" : "$errorMessageObj.errorDescription"
                }
        requestTemplates:
          application/json: |
            ##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
            ##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload
            #set($allParams = $input.params())
            #set($qParams = $allParams.get("querystring"))
            #set($pParams = $allParams.get("path"))
            {
            "body" : {
            #foreach($paramName in $qParams.keySet())
            "$paramName" : "$util.escapeJavaScript($qParams.get($paramName))"
              #if($foreach.hasNext),#end
            #end
            #foreach($paramName in $pParams.keySet())
            "$paramName" : "$util.escapeJavaScript($pParams.get($paramName))"
              #if($foreach.hasNext),#end
            #end
            },
            "stage-variables" : {
            #foreach($key in $stageVariables.keySet())
            "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                #if($foreach.hasNext),#end
            #end
            },
            "context" : {
                "account-id" : "$context.identity.accountId",
                "api-id" : "$context.apiId",
                "api-key" : "$context.identity.apiKey",
                "authorizer-principal-id" : "$context.authorizer.principalId",
                "claims" : "$context.authorizer.claims",
                "caller" : "$context.identity.caller",
                "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                "http-method" : "$context.httpMethod",
                "stage" : "$context.stage",
                "source-ip" : "$context.identity.sourceIp",
                "user" : "$context.identity.user",
                "user-agent" : "$context.identity.userAgent",
                "user-arn" : "$context.identity.userArn",
                "request-id" : "$context.requestId",
                "resource-id" : "$context.resourceId",
                "resource-path" : "$context.resourcePath"
                }
            }
        passthroughBehavior: when_no_match
        uri: arn:aws:apigateway:us-east-1:lambda:path//2015-03-31/functions/arn:aws:lambda:us-east-1:982932535341:function:clm_customer_bundle_by_account/invocations
        httpMethod: POST
        type: aws
      security:
        - CustomAuthorizer: []
        
  /account/chanellineups:
    post:
      summary: "Returns all account channel lineups."
      operationId: "GetAccountChannelLineUps"
      description: "For received account number, billing systems and corporation id, service returns all channel lineups - if any."
      tags:
        - Account
      parameters:
        - name: getAccountChannelLineUps
          in: body
          description: Returns all account channel lineups.
          required: true
          schema:
            $ref: "#/definitions/GetAccountChannelLineUpRequest"
      produces:
        - application/json
      responses:
        200:
          description: "All account channel lineups."
          schema:
            $ref: "#/definitions/ChannelLineup"
        400:
          description: "Bad request."
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "User not authenticated."
        403:
          description: "User not authorized."
        404:
          description: "Not found."
        429:
          description: "API rate limit exceeded. Please try later."
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: |-
                $input.path('$')
          ".*\"errorCode\":\"400\",.*":
            statusCode: '400'
            responseTemplates:
              application/json: |-
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errorCode" : "$errorMessageObj.errorCode",
                  "message" : "$errorMessageObj.message",
                  "requestId" : "$errorMessageObj.requestId",
                  "errorDescription" : "$errorMessageObj.errorDescription"
                }
          ".*\"errorCode\":\"401\",.*":
            statusCode: '401'
            responseTemplates:
              application/json: |-
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errorCode" : "$errorMessageObj.errorCode",
                  "message" : "$errorMessageObj.message",
                  "requestId" : "$errorMessageObj.requestId",
                  "errorDescription" : "$errorMessageObj.errorDescription"
                }
          ".*\"errorCode\":\"403\",.*":
            statusCode: '403'
            responseTemplates:
              application/json: |-
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errorCode" : "$errorMessageObj.errorCode",
                  "message" : "$errorMessageObj.message",
                  "requestId" : "$errorMessageObj.requestId",
                  "errorDescription" : "$errorMessageObj.errorDescription"
                }
          ".*\"errorCode\":\"404\",.*":
            statusCode: '404'
            responseTemplates:
              application/json: |-
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errorCode" : "$errorMessageObj.errorCode",
                  "message" : "$errorMessageObj.message",
                  "requestId" : "$errorMessageObj.requestId",
                  "errorDescription" : "$errorMessageObj.errorDescription"
                }
          ".*\"errorCode\":\"500\",.*":
            statusCode: '500'
            responseTemplates:
              application/json: |-
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errorCode" : "$errorMessageObj.errorCode",
                  "message" : "$errorMessageObj.message",
                  "requestId" : "$errorMessageObj.requestId",
                  "errorDescription" : "$errorMessageObj.errorDescription"
                }
        requestTemplates:
          application/json: |
            ##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
            ##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload
            #set($allParams = $input.params())
            {
            "body" : $input.json('$'),
            "params" : {
            #foreach($type in $allParams.keySet())
                #set($params = $allParams.get($type))
            "$type" : {
                #foreach($paramName in $params.keySet())
                "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                    #if($foreach.hasNext),#end
                #end
            }
                #if($foreach.hasNext),#end
            #end
            },
            "stage-variables" : {
            #foreach($key in $stageVariables.keySet())
            "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                #if($foreach.hasNext),#end
            #end
            },
            "context" : {
                "account-id" : "$context.identity.accountId",
                "api-id" : "$context.apiId",
                "api-key" : "$context.identity.apiKey",
                "authorizer-principal-id" : "$context.authorizer.principalId",
                "claims" : "$context.authorizer.claims",
                "caller" : "$context.identity.caller",
                "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                "http-method" : "$context.httpMethod",
                "stage" : "$context.stage",
                "source-ip" : "$context.identity.sourceIp",
                "user" : "$context.identity.user",
                "user-agent" : "$context.identity.userAgent",
                "user-arn" : "$context.identity.userArn",
                "request-id" : "$context.requestId",
                "resource-id" : "$context.resourceId",
                "resource-path" : "$context.resourcePath"
                }
            }
        passthroughBehavior: when_no_match
        uri: arn:aws:apigateway:us-east-1:lambda:path//2015-03-31/functions/arn:aws:lambda:us-east-1:982932535341:function:clm_customer_channel_lineup_by_account/invocations
        httpMethod: POST
        type: aws
      security:
        - CustomAuthorizer: []
        
  /account/summary/email:
    get:
      summary: "Get Customer contact e-mail."
      operationId: "getAccountContactEmail"
      description: "By provided account number operation returns Customer's contact e-mail address."
      parameters:
        - name: accountNumber
          in: query
          type: string
          description: Account Number
          required: true
      tags:
        - Account
      produces:
        - application/json
      responses:
        200:
          description: The Customer's contact email address
          schema:
            type: object
            properties:
              email:
                type: 'string'
                description: "Email address"
        400:
          description: "Bad request."
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "User not authenticated."
        403:
          description: "User not authorized."
        404:
          description: "Not found."
        429:
          description: "API rate limit exceeded. Please try later."
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/Error"  
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: |-
                $input.path('$')
          ".*\"errorCode\":\"400\",.*":
            statusCode: '400'
            responseTemplates:
              application/json: |-
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errorCode" : "$errorMessageObj.errorCode",
                  "message" : "$errorMessageObj.message",
                  "requestId" : "$errorMessageObj.requestId",
                  "errorDescription" : "$errorMessageObj.errorDescription"
                }
          ".*\"errorCode\":\"401\",.*":
            statusCode: '401'
            responseTemplates:
              application/json: |-
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errorCode" : "$errorMessageObj.errorCode",
                  "message" : "$errorMessageObj.message",
                  "requestId" : "$errorMessageObj.requestId",
                  "errorDescription" : "$errorMessageObj.errorDescription"
                }
          ".*\"errorCode\":\"403\",.*":
            statusCode: '403'
            responseTemplates:
              application/json: |-
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errorCode" : "$errorMessageObj.errorCode",
                  "message" : "$errorMessageObj.message",
                  "requestId" : "$errorMessageObj.requestId",
                  "errorDescription" : "$errorMessageObj.errorDescription"
                }
          ".*\"errorCode\":\"500\",.*":
            statusCode: '500'
            responseTemplates:
              application/json: |-
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errorCode" : "$errorMessageObj.errorCode",
                  "message" : "$errorMessageObj.message",
                  "requestId" : "$errorMessageObj.requestId",
                  "errorDescription" : "$errorMessageObj.errorDescription"
                }
        requestTemplates:
          application/json: |
            ##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
            ##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload
            #set($allParams = $input.params())
            #set($qParams = $allParams.get("querystring"))
            #set($pParams = $allParams.get("path"))
            {
            "body" : {
            #foreach($paramName in $qParams.keySet())
            "$paramName" : "$util.escapeJavaScript($qParams.get($paramName))"
              #if($foreach.hasNext),#end
            #end
            #foreach($paramName in $pParams.keySet())
            "$paramName" : "$util.escapeJavaScript($pParams.get($paramName))"
              #if($foreach.hasNext),#end
            #end
            },
            "stage-variables" : {
            #foreach($key in $stageVariables.keySet())
            "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                #if($foreach.hasNext),#end
            #end
            },
            "context" : {
                "account-id" : "$context.identity.accountId",
                "api-id" : "$context.apiId",
                "api-key" : "$context.identity.apiKey",
                "authorizer-principal-id" : "$context.authorizer.principalId",
                "claims" : "$context.authorizer.claims",
                "caller" : "$context.identity.caller",
                "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                "http-method" : "$context.httpMethod",
                "stage" : "$context.stage",
                "source-ip" : "$context.identity.sourceIp",
                "user" : "$context.identity.user",
                "user-agent" : "$context.identity.userAgent",
                "user-arn" : "$context.identity.userArn",
                "request-id" : "$context.requestId",
                "resource-id" : "$context.resourceId",
                "resource-path" : "$context.resourcePath"
                }
            }
        passthroughBehavior: when_no_match
        uri: arn:aws:apigateway:us-east-1:lambda:path//2015-03-31/functions/arn:aws:lambda:us-east-1:982932535341:function:clm_customer_email_by_account/invocations
        httpMethod: POST
        type: aws
      security:
        - CustomAuthorizer: []
    put:
      summary: "Update Customer contact e-mail."
      operationId: "updateAccountContactEmail"
      description: "By provided account number operation returns Customer's contact e-mail address."
      parameters:
        - name: accountNumber
          in: query
          type: string
          description: "Account Number"
          required: true
        - name: email
          in: query
          type: string
          description: "New email address"
          required: true
      tags:
        - Account
      produces:
        - application/json
      responses:
        204:
          description: "Customer's contact email address successfully updated"
        400:
          description: "Bad request."
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "User not authenticated."
        403:
          description: "User not authorized."
        404:
          description: "Not found."
        429:
          description: "API rate limit exceeded. Please try later."
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/Error"  
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '204'
            responseTemplates:
              application/json: |-
                $input.path('$')
          ".*\"errorCode\":\"400\",.*":
            statusCode: '400'
            responseTemplates:
              application/json: |-
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errorCode" : "$errorMessageObj.errorCode",
                  "message" : "$errorMessageObj.message",
                  "requestId" : "$errorMessageObj.requestId",
                  "errorDescription" : "$errorMessageObj.errorDescription"
                }
          ".*\"errorCode\":\"401\",.*":
            statusCode: '401'
            responseTemplates:
              application/json: |-
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errorCode" : "$errorMessageObj.errorCode",
                  "message" : "$errorMessageObj.message",
                  "requestId" : "$errorMessageObj.requestId",
                  "errorDescription" : "$errorMessageObj.errorDescription"
                }
          ".*\"errorCode\":\"403\",.*":
            statusCode: '403'
            responseTemplates:
              application/json: |-
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errorCode" : "$errorMessageObj.errorCode",
                  "message" : "$errorMessageObj.message",
                  "requestId" : "$errorMessageObj.requestId",
                  "errorDescription" : "$errorMessageObj.errorDescription"
                }
          ".*\"errorCode\":\"500\",.*":
            statusCode: '500'
            responseTemplates:
              application/json: |-
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errorCode" : "$errorMessageObj.errorCode",
                  "message" : "$errorMessageObj.message",
                  "requestId" : "$errorMessageObj.requestId",
                  "errorDescription" : "$errorMessageObj.errorDescription"
                }
        requestTemplates:
          application/json: |
            ##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
            ##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload
            #set($allParams = $input.params())
            #set($qParams = $allParams.get("querystring"))
            #set($pParams = $allParams.get("path"))
            {
            "body" : {
            #foreach($paramName in $qParams.keySet())
            "$paramName" : "$util.escapeJavaScript($qParams.get($paramName))"
              #if($foreach.hasNext),#end
            #end
            #foreach($paramName in $pParams.keySet())
            "$paramName" : "$util.escapeJavaScript($pParams.get($paramName))"
              #if($foreach.hasNext),#end
            #end
            },
            "stage-variables" : {
            #foreach($key in $stageVariables.keySet())
            "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                #if($foreach.hasNext),#end
            #end
            },
            "context" : {
                "account-id" : "$context.identity.accountId",
                "api-id" : "$context.apiId",
                "api-key" : "$context.identity.apiKey",
                "authorizer-principal-id" : "$context.authorizer.principalId",
                "claims" : "$context.authorizer.claims",
                "caller" : "$context.identity.caller",
                "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                "http-method" : "$context.httpMethod",
                "stage" : "$context.stage",
                "source-ip" : "$context.identity.sourceIp",
                "user" : "$context.identity.user",
                "user-agent" : "$context.identity.userAgent",
                "user-arn" : "$context.identity.userArn",
                "request-id" : "$context.requestId",
                "resource-id" : "$context.resourceId",
                "resource-path" : "$context.resourcePath"
                }
            }
        passthroughBehavior: when_no_match
        uri: arn:aws:apigateway:us-east-1:lambda:path//2015-03-31/functions/arn:aws:lambda:us-east-1:982932535341:function:clm_update_customer_email_by_account/invocations
        httpMethod: POST
        type: aws
      security:
        - CustomAuthorizer: []

securityDefinitions:
  CustomAuthorizer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "custom"
    x-amazon-apigateway-authorizer:
      authorizerResultTtlInSeconds: 60
      authorizerUri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:982932535341:function:clm_custom_authorizer/invocations"
      type: "token"
################################################################################
#                                 Definitions                                  #
################################################################################
definitions:
  AccountSummary:
    type: "object"
    description: "Customer account summary."
    properties:
      marketId:
        type: "string"
        minLength: 1
        description: "WOW Market Id"
      accountNumber:
        type: "string"
        minLength: 1
        description: "WOW Account number"
      customerName:
        type: "string"
        description: "Customer name"
        minLength: 1
      customerType:
        type: string
        description: "Customer type"
        enum: [Residential, Business]
      accountStatus:
        type: string
        description: "Account status"
        enum: [Residential, Business, MDU]
      customerSegmentation:
        type: string
        description: "Customer segmentation"
      addressId:
        type: string
        description: "WOW address id."
      streetAddress:
        type: string
        description: "Address name"
      appartmentNumber:
        type: string
        description: "Appartment number"
      city:
        type: string
        description: "City"
      state:
        type: string
        description: "State"
      zip:
        type: string
        description: "ZIP"
      fullAddress:
        type: string
        description: "Complete address"
      emailAddresses:
        type: string
        description: "List of e-mail addresses"
      daytimePhone:
        type: string
        description: "Daytime phone"
      eveningPhone:
        type: string
        description: "Evening phone"
      otherPhoneNumber:
        type: string
        description: "Other phone number"
      contactName:
        type: string
        description: "Contact name"

  BillingInfo:
    type: "object"
    description: "Customer account summary."
    properties:
      accountStanding:
        type: "string"
        description: "Status info"
      autoPay:
        type: "string"
        enum: [None, Bank, CreditCard]
        description: "If auto pay is turned on or no info is provided"
      billCycle:
        type: "string"
        description: "Billing cycle"
      billGroupid:
        type: "string"
        description: "Billing group ID"
      billType:
        type: string
        description: "Billing type"
      billingAddress:
        type: string
        description: "Billing address info"
      creditBalance:
        type: "number"
        format: "double"
        description: "Credit ballance info."
      currentBalance:
        type: "number"
        format: "double"
        description: "Current balance"
      deliveryMethod:
        type: string
        description: "Delivery method. Ex: Paper"
      discountDollars:
        type: "number"
        format: "double"
        description: "Discount value"
      lastDayToPay:
        type: string
        description: "Last day to pay"
      lastPaymentAmount:
        type: "number"
        format: "double"
        description: "Amount of the last successful payment"
      lastPaymentDate:
        type: string
        description: "Date when last payment was made"
      lastStatementAmount:
        type: "number"
        format: "double"
        description: "Amount of the last statement"
      lastStatementDate:
        type: string
        description: "Date of the last statement"
      MRC:
        type: "number"
        format: "float"
        description: "MRC"
      nextStatementDate:
        type: string
        description: "Date of the next statement"
      pastDueAmount:
        type: "number"
        format: "double"
        description: "Past due amount"
      pastDueDays:
        type: "integer"
        format: "int32"
        description: "Past due days"
      paymentBlockStatus:
        type: "string"
        description: "Status of payment block"
      paymentDueDate:
        type: "string"
        description: "Payment due date"
      paymentDueDateDesc:
        type: "string"
        description: "Description for payment due date"
      paymentsStatusDescription:
        type: "string"
        description: "Description for payment status"
      pendingPayment:
        type: "number"
        format: "double"
        description: "Amount of pending payment"
      serviceCharges:
        type: "number"
        format: "double"
        description: "Service charges"    

  AccountBundle:
    type: "object"
    description: "Account bundle"
    properties:
      cable:
        $ref: "#/definitions/Cable"
      internet:
        $ref: "#/definitions/Internet"
      phone:
        $ref: "#/definitions/Phone"
      package:
        type: array
        items:
          $ref: "#/definitions/Package"
      equipment:
        type: array
        items:
          $ref: "#/definitions/Equipment"  
  
  Cable:
    type: "object"
    description: "Cable details as part of account bundle"
    properties:
      disconnectDate:
        type: string
        description: "Date when service is disconected"
      firstConnectDate:
        type: string
        description: "Date when service is connected for the first time"
      premiumCinemax:
        type: string
        description: "Premium cinemax service info"
      premiumHBO:
        type: string
        description: "Premium HBO service info"
      premiumShowTime:
        type: string
        description: "Premium ShowTime service info"
      premiumStarz:
        type: string
        description: "Premium Starz service info"
 
  Phone:
    type: "object"
    properties:
      disconnectDate:
        type: string
        description: "Date when service is disconected"
      firstConnectDate:
        type: string
        description: "Date when service is was connected for the first time"
  
  Internet:
    type: "object"
    properties:
      disconnectDate:
        type: string
        description: "Date when service is disconected"
      firstConnectDate:
        type: string
        description: "Date when service is was connected for the first time"
      freeEmailQty:
        type: "integer"
        format: "int32"
        description: "Quantity of free email"
      setEmailQty:
        type: "integer"
        format: "int32"
        description: "Quantity of free email"
        
  Package:
    type: "object"
    properties:
      id:
        type: string
        description: "ID"
      location:
        type: string
        description: "Location"
      name:
        type: string
        description: "Name"
      startDate:
        type: "string"
        description: "Start date"
      type:
        type: "string"
        description: "Type"
        
  Equipment:
    type: "object"
    properties:
      equipmentModel:
        type: string
        description: "Equipment model"
      equipmentType:
        type: string
        description: "Equipment type"
      installDate:
        type: string
        description: "Date of installation"
      macaddress:
        type: "string"
        description: "MAC address"
      serialNumber:
        type: "string"
        description: "Serial number"
      
  GetAccountChannelLineUpRequest:
    type: "object"
    properties:
      accountNumber:
        type: "string"
        minLength: 1
        description: "WOW Account number"
      billingSystemId:
        type: "string"
        minLength: 1
        description: "WOW Billing system id"
      corpId:
        type: "string"
        minLength: 1
        description: "WOW corporation id" 

  ChannelLineup:
    type: array
    description: "Account channel lineups items."
    minItems: 0
    items:
      properties:
        channel:
          type: string
          maxLength: 255

  CustomerAccountByAccNumberRequest:
    type: object
    description: Customer account information.
    properties:
      accountNumber:
        type: string
        pattern: '^\d+$'
        description: "Represents the customer account number in one of the WOW billing systems."
    required: [accountNumber]
    
  UpdateAccountEmailAddressRequest:
    type: object
    description: New Customer account communication email.
    properties:
      accountNumber:
        type: string
        pattern: '^\d+$'
        description: "Represents the customer account number in one of the WOW billing systems."
      email:
        type: string
        description: "New communication email"
    required: [accountNumber, email]
    
  Error:
    type: "object"
    properties:
      errorCode:
        type: "integer"
        format: "int32"
      errorDescription:
        type: "string"
      message:
        type: "string"
    required: [errorCode, errorDescription, message]
